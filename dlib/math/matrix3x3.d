/*
Copyright (c) 2011-2013 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dlib.math.matrix3x3;

private 
{
    import std.math;

    import dlib.math.utils;
    import dlib.math.vector;
}

public:

struct Matrix3x3(T)
{
    public:

    this(Matrix3x3!(T) m)
    body
    {
        arrayof[] = m.arrayof[];
    }
    
   /*
    * Return an identity matrix
    */
    static opCall()
    body
    {
        Matrix3x3!(T) res;
        res.identity();
        return res;
    }
    
   /*
    * Matrix3x3!(T) * T
    */
    Matrix3x3!(T) opMul (T t)
    body
    {
        Matrix3x3!(T) res;
        res.identity();
        res.row1 *= t;
        res.row2 *= t;
        res.row3 *= t;
        return res;
    }
    
   /*
    * Matrix3x3!(T) * T
    */
    T opMulAssign (T t)
    body
    {
        row1 *= t;
        row2 *= t;
        row3 *= t;
        return t;
    }
    
   /*
    * Matrix3x3!(T) + Matrix3x3!(T)
    */
    Matrix3x3!(T) opAdd (Matrix3x3!(T) m)
    body
    {       
        Matrix3x3!(T) res;
        res.identity;

        res.m11 = m11 + m.m11; res.m12 = m12 + m.m12; res.m13 = m13 + m.m13;
        res.m21 = m21 + m.m21; res.m22 = m22 + m.m22; res.m23 = m23 + m.m23;
        res.m31 = m31 + m.m31; res.m32 = m32 + m.m32; res.m33 = m33 + m.m33;

        return res;
    }
    
   /*
    * Matrix3x3!(T) * Matrix3x3!(T)
    */
    Matrix3x3!(T) opMul (Matrix3x3!(T) m)
    body
    {       
        Matrix3x3!(T) res;
        res.identity;

        res.m11 = (m11 * m.m11) + (m21 * m.m12) + (m31 * m.m13);
        res.m12 = (m12 * m.m11) + (m22 * m.m12) + (m32 * m.m13);
        res.m13 = (m13 * m.m11) + (m23 * m.m12) + (m33 * m.m13);

        res.m21 = (m11 * m.m21) + (m21 * m.m22) + (m31 * m.m23);
        res.m22 = (m12 * m.m21) + (m22 * m.m22) + (m32 * m.m23);
        res.m23 = (m13 * m.m21) + (m23 * m.m22) + (m33 * m.m23);

        res.m31 = (m11 * m.m31) + (m21 * m.m32) + (m31 * m.m33);
        res.m32 = (m12 * m.m31) + (m22 * m.m32) + (m32 * m.m33);
        res.m33 = (m13 * m.m31) + (m23 * m.m32) + (m33 * m.m33);

        return res;
    }
    
   /*
    * Matrix3x3!(T) *= Matrix3x3!(T)
    */
    Matrix3x3!(T) opMulAssign (Matrix3x3!(T) m)
    body
    {
        Matrix3x3!(T) res;
        res.identity();

        res.m11 = (m11 * m.m11) + (m21 * m.m12) + (m31 * m.m13);
        res.m12 = (m12 * m.m11) + (m22 * m.m12) + (m32 * m.m13);
        res.m13 = (m13 * m.m11) + (m23 * m.m12) + (m33 * m.m13);

        res.m21 = (m11 * m.m21) + (m21 * m.m22) + (m31 * m.m23);
        res.m22 = (m12 * m.m21) + (m22 * m.m22) + (m32 * m.m23);
        res.m23 = (m13 * m.m21) + (m23 * m.m22) + (m33 * m.m23);

        res.m31 = (m11 * m.m31) + (m21 * m.m32) + (m31 * m.m33);
        res.m32 = (m12 * m.m31) + (m22 * m.m32) + (m32 * m.m33);
        res.m33 = (m13 * m.m31) + (m23 * m.m32) + (m33 * m.m33);
		
        arrayof[] = res.arrayof[];

        return m;
    }
    
   /*
    * Matrix3x3!(T) += Matrix3x3!(T)
    */
    Matrix3x3!(T) opAddAssign (Matrix3x3!(T) m)
    body
    {
        m11 += m.m11; m12 += m.m12; m13 += m.m13;
        m21 += m.m21; m22 += m.m22; m23 += m.m23;
        m31 += m.m31; m32 += m.m32; m33 += m.m33;

        return this;
    }
    
   /*
    * Matrix3x3!(T) -= Matrix3x3!(T)
    */
    Matrix3x3!(T) opSubAssign (Matrix3x3!(T) m)
    body
    {
        m11 -= m.m11; m12 -= m.m12; m13 -= m.m13;
        m21 -= m.m21; m22 -= m.m22; m23 -= m.m23;
        m31 -= m.m31; m32 -= m.m32; m33 -= m.m33;

        return this;
    }

   /* 
    * T = Matrix3x3!(T)[index]
    */
    T opIndex(in int index) const
    in
    {
        assert ((0 <= index) && (index < 9), 
            "Matrix3x3!(T).opIndex(int index): array index out of bounds");
    }
    body
    {
        return arrayof[index];
    }
    
   /*
    * Matrix3x3!(T)[index] = T
    */
    T opIndexAssign(in T t, in int index)
    in
    {
        assert ((0 <= index) && (index < 9), 
            "Matrix3x3!(T).opIndexAssign(T t, int index): array index out of bounds");
    }
    body
    {
        return (arrayof[index] = t);
    }
    
   /*
    * Matrix3x3!(T)[index1..index2] = T
    */
    T[] opSliceAssign(in T t, in int index1, in int index2)
    in
    {
        assert ((0 <= index1) && (index1 < 9) && (0 <= index2) && (index2 < 9), 
            "Matrix3x3!(T).opSliceAssign(T t, int index1, int index2): array index out of bounds");
    }
    body
    {
        return (arrayof[index1..index2] = t);
    }
    
   /* 
    * T = Matrix3x3!(T)[x, y]
    */
    T opIndex(in int x, in int y) const
    in
    {
        assert ((0 < x) && (x < 3) && (0 < y) && (y < 3), 
            "Matrix3x3!(T).opIndex(int x, int y): array index out of bounds");
    }
    body
    {
        return arrayof[y * 3 + x];
    }
    
   /* 
    * Matrix3x3!(T)[x, y] = T
    */
    T opIndexAssign(in T t, in int x, in int y)
    in
    {
        assert ((0 < x) && (x < 3) && (0 < y) && (y < 3), 
            "Matrix3x3!(T).opIndexAssign(int x, int y): array index out of bounds");
    }
    body
    {
        return (arrayof[y * 3 + x] = t);
    }
    
   /* 
    * Matrix3x3!(T)[] = T
    */
    T[] opSliceAssign(in T t)
    body
    {
        return (arrayof[] = t);
    }
    
   /*
    * Set to identity
    */
    void identity()
    body
    {
        m11 = 1.0; m21 = 0.0; m31 = 0.0;
        m12 = 0.0; m22 = 1.0; m32 = 0.0;
        m13 = 0.0; m23 = 0.0; m33 = 1.0;
    }
    
   /*
    * Transpose
    */
    void transpose()
    body
    {
        this = transposed;
    }

   /*
    * Convert row-major to column-major and vice versa
    */
    alias transpose toggleStorageOrder;
    
   /*
    * Invert
    */
    void invert()
    body
    {
        this = inverse;
    }
    
   /*
    * Transform a point by the matrix
    */
    Vector!(T,3) transform(Vector!(T,3) v) 
    body
    {
        return Vector!(T,3) 
        (
            (v.x * m11) + (v.y * m21) + (v.z * m31),
            (v.x * m12) + (v.y * m22) + (v.z * m32),
            (v.x * m13) + (v.y * m23) + (v.z * m33)
        );
    }
    
    alias transform rotate;
    
   /*
    * Return the transpose matrix
    */
    @property Matrix3x3!(T) transposed()
    body
    {
        Matrix3x3!(T) res;

        res.m11 = m11; res.m21 = m12; res.m31 = m13;
        res.m12 = m21; res.m22 = m22; res.m32 = m23;
        res.m13 = m31; res.m23 = m32; res.m33 = m33;

        return res;	
    }
    
   /* 
    * Return the determinant of the matrix
    */
    @property T determinant()
    body
    {
        return m11 * (m33 * m22 - m32 * m23)
             - m21 * (m33 * m12 - m32 * m13)
             + m31 * (m23 * m12 - m22 * m13);
    }
    
   /* 
    * Return the inverse of a matrix
    */
    @property Matrix3x3!(T) inverse()
    body
    {
        T det = determinant;
        
        T oneOverDet = 1.0 / det;
        
        Matrix3x3!(T) res;
        
        res.m11 =  (m33 * m22 - m32 * m23) * oneOverDet;
        res.m12 = -(m33 * m12 - m32 * m13) * oneOverDet;
        res.m13 =  (m23 * m12 - m22 * m13) * oneOverDet;
        
        res.m21 = -(m33 * m21 - m31 * m23) * oneOverDet;
        res.m22 =  (m33 * m11 - m31 * m13) * oneOverDet;
        res.m23 = -(m23 * m11 - m21 * m13) * oneOverDet;
        
        res.m31 =  (m32 * m21 - m31 * m22) * oneOverDet;
        res.m32 = -(m32 * m11 - m31 * m12) * oneOverDet;
        res.m33 =  (m22 * m11 - m21 * m12) * oneOverDet;
        
        return res;
    }
    
    @property Matrix3x3!(T) negative()
    body
    {
        Matrix3x3!(T) res;
        res.arrayof[] = -arrayof[];
        return res;
    }
    
   /* 
    * Matrix components
    */
    union 
    {
        struct
        {
            T m11, m12, m13;
            T m21, m22, m23;
            T m31, m32, m33;
        }
        
        struct
        {
            Vector!(T,3) row1;
            Vector!(T,3) row2;
            Vector!(T,3) row3;
        }
        
        T[9] arrayof;
    }
}

/*
 * Return identity matrix
 */
Matrix3x3!(T) identityMatrix3x3(T) ()
body
{
    Matrix3x3!(T) res;
    res.identity();
    return res;
}

/*
 * Predefined matrix type aliases
 */
alias Matrix3x3!(float) Matrix3x3f;
alias Matrix3x3!(double) Matrix3x3d;

alias identityMatrix3x3!(float) identityMatrix3x3f;
alias identityMatrix3x3!(double) identityMatrix3x3d;
