/*
Copyright (c) 2011-2013 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dlib.math.matrix2x2;

private 
{
    import std.stdio;
    import std.math;

    import dlib.math.utils;
    import dlib.math.vector;
}

struct Matrix2x2(T)
{
    public:

    this(Matrix2x2!(T) m)
    body
    {
        arrayof[] = m.arrayof[];
    }

   /*
    * Matrix2x2!(T) * Matrix2x2!(T)
    */
    Matrix2x2!(T) opMul (Matrix2x2!(T) m)
    body
    {       
        Matrix2x2!(T) res;
        res.identity;

        res.m11 = (m11 * m.m11) + (m21 * m.m12);
        res.m12 = (m12 * m.m11) + (m22 * m.m12);
        res.m21 = (m11 * m.m21) + (m21 * m.m22);
        res.m22 = (m12 * m.m21) + (m22 * m.m22);

        return res;
    }

   /*
    * Matrix2x2!(T) *= Matrix2x2!(T)
    */
    Matrix2x2!(T) opMulAssign (Matrix2x2!(T) m)
    body
    {
        Matrix2x2!(T) res;
        res.identity;

        res.m11 = (m11 * m.m11) + (m21 * m.m12);
        res.m12 = (m12 * m.m11) + (m22 * m.m12);
        res.m21 = (m11 * m.m21) + (m21 * m.m22);
        res.m22 = (m12 * m.m21) + (m22 * m.m22);
		
        arrayof[] = res.arrayof[];

        return m;
    }

   /* 
    * T = Matrix2x2!(T)[index]
    */
    T opIndex(int index)
    in
    {
        assert ((0 <= index) && (index < 4), 
            "Matrix2x2!(T).opIndex(int index): array index out of bounds");
    }
    body
    {
        return arrayof[index];
    }

   /*
    * Matrix2x2!(T)[index] = T
    */
    T opIndexAssign(T t, int index)
    in
    {
        assert ((0 <= index) && (index < 4), 
            "Matrix2x2!(T).opIndexAssign(T t, int index): array index out of bounds");
    }
    body
    {
        return (arrayof[index] = t);
    }

   /*
    * Matrix2x2!(T)[index1..index2] = T
    */
    T[] opSliceAssign(T t, int index1, int index2)
    in
    {
        assert ((0 <= index1) && (index1 < 4) && (0 <= index2) && (index2 < 4), 
            "Matrix2x2!(T).opSliceAssign(T t, int index1, int index2): array index out of bounds");
    }
    body
    {
        return (arrayof[index1..index2] = t);
    }

   /* 
    * T = Matrix2x2!(T)[x, y]
    */
    T opIndex(int x, int y)
    in
    {
        assert ((0 < x) && (x < 2) && (0 < y) && (y < 2), 
            "Matrix2x2!(T).opIndex(int x, int y): array index out of bounds");
    }
    body
    {
        return arrayof[y * 2 + x];
    }

   /* 
    * Matrix2x2!(T)[x, y] = T
    */
    T opIndexAssign(T t, int x, int y)
    in
    {
        assert ((0 < x) && (x < 2) && (0 < y) && (y < 2), 
            "Matrix2x2!(T).opIndexAssign(int x, int y): array index out of bounds");
    }
    body
    {
        return (arrayof[y * 2 + x] = t);
    }

   /* 
    * Matrix2x2!(T)[] = T
    */
    T[] opSliceAssign(T t)
    body
    {
        return (arrayof[] = t);
    }

   /*
    * Set to identity
    */
    void identity()
    body
    {
        m11 = 1.0; m21 = 0.0;
        m12 = 0.0; m22 = 1.0;
    }

    void diagonal(T d1, T d2)
    {
        m11 = d1;  m21 = 0.0;
        m12 = 0.0; m22 = d2;
    }

   /*
    * Transpose
    */
    void transpose()
    body
    {
        this = transposed;
    }

   /*
    * Invert
    */
    void invert()
    body
    {
        this = inverse;
    }

   /*
    * Convert row-major to column-major and vice versa
    */
    alias transpose toggleStorageOrder;

   /*
    * Transform a point by the matrix
    */
    void transform (ref Vector!(T,2) v)
    {
        v = Vector!(T,2)
        (
            (m11 * v[0]) + (m21 * v[1]),
            (m12 * v[0]) + (m22 * v[1]),            
        );
    }

   /*
    * Return the transpose matrix
    */
    @property Matrix2x2!(T) transposed()
    body
    {
        Matrix2x2!(T) res;
        res.m11 = m11; res.m21 = m12;
        res.m12 = m21; res.m22 = m22;
        return res;	
    }

   /* 
    * Return the determinant of a matrix
    */
    @property T determinant()
    body
    {
        return (m11 * m22 - m21 * m12);
    }

   /* 
    * Return the inverse of a matrix
    */
    @property Matrix2x2!(T) inverse()
    body
    {
        T det = determinant;
        Matrix2x2!(T) res;

        if (fabs(det) > EPSILON)
        {
            T oneOverDet = 1.0 / det;
            res[0] =  arrayof[3] * oneOverDet;
            res[1] = -arrayof[1] * oneOverDet;
            res[2] = -arrayof[2] * oneOverDet;
            res[3] =  arrayof[0] * oneOverDet;
        }
        else
        {
            // singular matrix, no inverse
            res[] = 0.0;
        }

        return res;
    }

    @property Matrix2x2!(T) adjugate()
    body
    {
        Matrix2x2!(T) res;
        res[0] =  arrayof[3];
        res[1] = -arrayof[1];
        res[2] = -arrayof[2];
        res[3] =  arrayof[0];
        return res;
    }

    @property Matrix2x2!(T) cofactor()
    body
    {
        Matrix2x2!(T) res;
        res[0] =  arrayof[3];
        res[1] = -arrayof[2];
        res[2] = -arrayof[1];
        res[3] =  arrayof[0];
        return res;
    }

    @property T angle()
    body
    {
        return atan2(arrayof[2], arrayof[0]);
    }

   /*
    * Gram-Schmidt process
    */
    void othonormalize()
    body
    {
        T invLength = 1.0 / sqrt(arrayof[0] * arrayof[0] + arrayof[2] * arrayof[2]);
        arrayof[0] *= invLength;
        arrayof[2] *= invLength;

        T dot0 = arrayof[0] * arrayof[1] + arrayof[2] * arrayof[3];
        arrayof[1] -= dot0 * arrayof[0];
        arrayof[3] -= dot0 * arrayof[2];

        invLength = 1.0 / sqrt(arrayof[1] * arrayof[1] + arrayof[3] * arrayof[3]);
        arrayof[1] *= invLength;
        arrayof[3] *= invLength;
    }

   /*
    * Factorization of a matrix into a canonical form, whereby the matrix 
    * is represented in terms of its eigenvalues
    */
    void eigendecomposition(T) (out Matrix2x2!(T) rot, out Matrix2x2!(T) diag)
    body
    {
        T sum = fabs(arrayof[0]) + fabs(arrayof[3]);
        if (fabs(arrayof[1]) + sum == sum)
        {
            rot.arrayof[0] = 1.0;
            rot.arrayof[1] = 0.0;
            rot.arrayof[2] = 0.0;
            rot.arrayof[3] = 0.1;
            diag.arrayof[0] = arrayof[0];
            diag.arrayof[1] = 0.0;
            diag.arrayof[2] = 0.0;
            diag.arrayof[3] = arrayof[3];
            return;
        }

        T trace = arrayof[0] + arrayof[3];
        T diff = arrayof[0] - arrayof[3];
        T discr = sqrt(diff * diff + 4.0 * arrayof[1] * arrayof[1]);
        T eigVal0 = 0.5 * (trace - discr);
        T eigVal1 = 0.5 * (trace + discr);
        diag.diagonal(eigVal0, eigVal1);

        T cs, sn;
        if (diff >= 0.0)
        {
            cs = arrayof[1];
            sn = eigVal0 - arrayof[0];
        }
        else
        {
            cs = eigVal0 - arrayof[3];
            sn = arrayof[1];
        }
        T invLength = 1.0 / sqrt(cs * cs + sn * sn);
        cs *= invLength;
        sn *= invLength;

        rot[0] = cs;
        rot[1] = -sn;
        rot[2] = sn;
        rot[3] = cs;
    }

   /* 
    * Matrix components
    */
    union 
    { 
        struct
        {
            T m11, m21;
            T m12, m22;
        }
        T[4] arrayof;
    }
}

Matrix2x2!(T) rotationMatrix(T) (T theta)
body
{
    Matrix2x2!(T) res;
    T s = sin(theta);
    T c = cos(theta);
    res.m11 = c; res.m21 = -s;
    res.m12 = s; res.m22 = c;
    return res;
}

Matrix2x2!(T) tensorProduct(T) (Vector!(T,2) u, Vector!(T,2) v)
body
{
    Matrix2x2!(T) res;
    res[0] = u[0] * v[0];
    res[1] = u[0] * v[1];
    res[2] = u[1] * v[0];
    res[3] = u[1] * v[1];
    return res;
}

/*
 * Predefined matrix type aliases
 */
alias Matrix2x2!(float) Matrix2x2f;
alias Matrix2x2!(double) Matrix2x2d;
