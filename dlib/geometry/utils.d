/*
Copyright (c) 2011-2013 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dlib.geometry.utils;

private
{
    import dlib.math.vector;
}

Vector3f triBarycentricCoords(Vector3f v0, Vector3f v1, Vector3f v2, Vector3f p)
{
    float triArea = cross((v1 - v0), (v2 - v0)).length * 0.5f;
    float u = (cross((v1 - p ), (v2 - p)).length * 0.5f) / triArea;
    float v = (cross((v0 - p ), (v2 - p)).length * 0.5f) / triArea;
    float w = (cross((v0 - p ), (v1 - p)).length * 0.5f) / triArea;
    return Vector3f(u, v, w);
}

// ta, tb, tc - triangle texture coords
// s, t - coords in texture space
Vector3f triBarycentricCoords(Vector2f ta, Vector2f tb, Vector2f tc, float s, float t)
{
    float d = (tb.x * tc.y) - (tb.y * tc.x) - (ta.x * tc.y) + (ta.y * tc.x) + (ta.x * tb.y) - (ta.y * tb.x);

    float m1 = ((tb.x * tc.y) - (tb.y * tc.x) - (s * tc.y) + (t * tc.x) + (s * tb.y) - (t * tb.x)) / d;
    float m2 = ((s * tc.y) - (t * tc.x) - (ta.x * tc.y) + (ta.y * tc.x) + (ta.x * t) - (ta.y * s)) / d;
    float m3 = ((tb.x * t) - (tb.y * s) - (ta.x * t) + (ta.y * s) + (ta.x * tb.y) - (ta.y * tb.x)) / d;

    return Vector3f(m1, m2, m3);
}

// va, vb, vc - triangle vectors (vertices, normals, colors, etc)
// bcc - barycentric coords
Vector3f triTextureSpaceToObjectSpace(Vector3f va, Vector3f vb, Vector3f vc, Vector3f bcc)
{
    return Vector3f(
        va.x * bcc.x + vb.x * bcc.y + vc.x * bcc.z,
        va.y * bcc.x + vb.y * bcc.y + vc.y * bcc.z,
        va.z * bcc.x + vb.z * bcc.y + vc.z * bcc.z,
    );
}

Vector2f triObjectSpaceToTextureSpace(
    Vector3f p1, Vector3f p2, Vector3f p3,
    Vector2f uv1, Vector2f uv2, Vector2f uv3,
    Vector3f pos)
{
    // Compute vectors 
    Vector3f v0 = p3 - p1;
    Vector3f v1 = p2 - p1;
    Vector3f v2 = pos - p1;

    // Compute dot products
    float dot00 = dot(v0, v0);
    float dot01 = dot(v0, v1);
    float dot02 = dot(v0, v2);
    float dot11 = dot(v1, v1);
    float dot12 = dot(v1, v2);

    // Compute barycentric coordinates
    float invDenom = 1.0f / (dot00 * dot11 - dot01 * dot01);
    float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    float v = (dot00 * dot12 - dot01 * dot02) * invDenom;
						
    Vector2f t2 = uv2 - uv1;
    Vector2f t1 = uv3 - uv1;

    return uv1 + t1*u + t2*v;
}

float sign(Vector2f p1, Vector2f p2, Vector2f p3)
{
    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);
}

bool isPointInTriangle2D(Vector2f pt, Vector2f v1, Vector2f v2, Vector2f v3)
{
    bool b1, b2, b3;

    b1 = sign(pt, v1, v2) < 0.0f;
    b2 = sign(pt, v2, v3) < 0.0f;
    b3 = sign(pt, v3, v1) < 0.0f;

    return ((b1 == b2) && (b2 == b3));
}
